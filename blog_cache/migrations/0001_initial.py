# Generated by Django 3.0.3 on 2020-02-16 23:50

import blog_cache.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ImageCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FilePathField(path=blog_cache.models.StringSettingsReference('UPLOAD_FOLDER'), recursive=True, unique=True)),
                ('fileType', models.CharField(max_length=24)),
                ('altText', models.CharField(blank=True, max_length=120, null=True)),
                ('cachedSmall', models.FilePathField(path=blog_cache.models.StringSettingsReference('STATIC_FOLDER'), recursive=True)),
                ('cachedMedium', models.FilePathField(path=blog_cache.models.StringSettingsReference('STATIC_FOLDER'), recursive=True)),
                ('cachedLarge', models.FilePathField(path=blog_cache.models.StringSettingsReference('STATIC_FOLDER'), recursive=True)),
                ('fileHash', models.CharField(max_length=160)),
                ('lastCached', models.DateTimeField()),
                ('isPortrait', models.BooleanField()),
                ('exifData', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TagCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True)),
                ('slug', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CategoryCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder', models.FilePathField(allow_files=False, allow_folders=True, path=blog_cache.models.StringSettingsReference('UPLOAD_FOLDER'), unique=True)),
                ('file', models.FilePathField(path=blog_cache.models.StringSettingsReference('UPLOAD_FOLDER'), recursive=True)),
                ('slug', models.SlugField(max_length=120, unique=True)),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True, null=True)),
                ('fileHash', models.CharField(max_length=160)),
                ('lastCached', models.DateTimeField()),
                ('featureImage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='blog_cache.ImageCache')),
            ],
        ),
        migrations.CreateModel(
            name='ArticleCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FilePathField(path=blog_cache.models.StringSettingsReference('UPLOAD_FOLDER'), recursive=True, unique=True)),
                ('fileHash', models.CharField(max_length=160)),
                ('slug', models.SlugField(max_length=240)),
                ('title', models.CharField(max_length=240)),
                ('description', models.TextField(blank=True, null=True)),
                ('published', models.DateTimeField()),
                ('author', models.CharField(blank=True, max_length=120, null=True)),
                ('cachedHeading', models.CharField(max_length=240)),
                ('cachedContent', models.TextField()),
                ('draft', models.BooleanField()),
                ('lastCached', models.DateTimeField()),
                ('extraData', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='blog_cache.CategoryCache')),
                ('featureImage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='blog_cache.ImageCache')),
                ('tags', models.ManyToManyField(to='blog_cache.TagCache')),
            ],
            options={
                'unique_together': {('slug', 'category')},
            },
        ),
    ]
